# -*- coding: utf-8 -*-
"""
Created on Sun Dec  5 10:16:10 2021

@author: Mike
"""

import numpy as np

def int_to_bin(x):
    """Convert an integer to a binary array."""
    return [int(d) for d in bin(x)[2:]]

def bin_to_int(x):
    """Convert a binary array to an integer."""
    return sum(val * (2 ** idx) for idx, val in enumerate(reversed(x)))

def check_power_of_2(bin_array):
    """Check if a binary array represents a power of 2.
    
    If not, return the smallest binary array that represents a power of 2
    greater than the given binary array.
    """
    if sum(bin_array) == 1:
        return bin_array
    else:
        return [1] + [0] * len(bin_array)

def get_power_of_2(x):
    """Return the least power of 2 greater than or equal to x."""
    bin_array = int_to_bin(x)
    power_of_2_array = check_power_of_2(bin_array)
    return bin_to_int(power_of_2_array)

def horner(coeffs, x):
    """Evaluate a polynomial at x using Horner's method."""
    result = coeffs[-1]
    for coeff in reversed(coeffs[:-1]):
        result = result * x + coeff
    return result

def fft(P, n):
    """Compute the Fast Fourier Transform of a polynomial P.

    P: Array of polynomial coefficients from least power to greatest.
    n: Number of samples, rounded up to the nearest power of 2.
    """
    n = get_power_of_2(n)
    w = np.exp(2 * np.pi * 1j * np.arange(n) / n)

    P_even = P[::2] + [0] * (n - len(P[::2]))
    P_odd = P[1::2] + [0] * (n - len(P[1::2]))

    y_even = [horner(P_even, w_i) for w_i in w[:n//2]]
    y_odd = [horner(P_odd, w_i) for w_i in w[:n//2]]

    y = np.empty(n, dtype=complex)
    for i in range(n//2):
        y[i] = y_even[i] + w[i] * y_odd[i]
        y[i + n//2] = y_even[i] - w[i] * y_odd[i]

    return y

# Example usage
result = fft([1, 2, 3, 4], 4)
print(result)
